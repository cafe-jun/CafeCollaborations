version: "3"

services:
  postgres:
    container_name: postgres
    build:
      context: ./postgres/
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: DEV
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgres/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    command: >
      bash -c '
        bin/elasticsearch-plugin install analysis-nori;
        /usr/local/bin/docker-entrypoint.sh
      '    


  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/jdbc/postgresql-42.2.13.jar:/usr/share/logstash/logstash-core/lib/jars/postgresql-42.2.13.jar
    depends_on:
      - postgres
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch
  redis:
    image: redis:latest # 공식 Redis 이미지를 사용합니다.
    container_name: redis # 컨테이너 이름을 지정합니다.
    ports:
      - "6379:6379" # Redis의 기본 포트인 6379를 호스트와 컨테이너에서 모두 사용 가능하게 매핑합니다.
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  elasticsearch_data:
  redis_data:
