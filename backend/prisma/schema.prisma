// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider = "prisma-kysely"
}

enum OauthProvider {
  KAKAO
  GOOGLE
  NAVER

  @@map("oauth_providers")
}

enum UserRole {
  ADMIN
  AUTHOR
  GUEST

  @@map("user_roles")
}

enum PostStatus {
  DRAFT
  PUBLISHED

  @@map("post_statuses")
}

enum Category {
  CA1000 // Accommodation
  CA1001 // Food
  CA1002 // Fashion
  CA1003 // Beauty
  CA1004 // App
  CA1005 // HouseholdGoods
  CA1006 // PetSupplies

  @@map("categories")
}

enum RecruitMember {
  RM1000 // Indefinite
  RM1002 // OneToFive
  RM1003 // SixToTen
  RM1004 // MoreThanTen

  @@map("recruit_members")
}

enum Duration {
  DU1000 // LessThanOneMonth
  DU1002 // OneToThreeMonths
  DU1003 // ThreeToSixMonths
  DU1004 // MoreThanSixMonths

  @@map("duration_types")
}

enum Region {
  RE1000 // Seoul
  RE1002 // Gyeonggi
  RE1003 // Gangwon
  RE1004 // Chungbuk
  RE1005 // Chungnam
  RE1006 // Jeonbuk
  RE1007 // Jeonnam
  RE1008 // Gyeongbuk
  RE1009 // Jeju

  @@map("regions")
}

model User {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  name      String
  provider  OauthProvider?
  createdAt DateTime       @default(now()) @map("created_at")
  post      Post[]
  role      UserRole

  @@map("users")
}

model Post {
  id             Int            @id @default(autoincrement())
  owner          User           @relation(fields: [userId], references: [id])
  title          String
  category       Category
  imageId        Int?           @map("image_id")
  content        String
  status         PostStatus
  region         Region?
  recruitMembers RecruitMember? @map("recruit_members")
  duration       Duration?      @map("duration")
  createdAt      DateTime?      @default(now()) @map("created_at")
  updatedAt      DateTime?      @default(now()) @updatedAt @map("updated_at")
  editedAt       DateTime?      @map("edited_at")
  removedAt      DateTime?      @map("removed_at")
  publishedAt    DateTime?      @map("published_at")
  userId         Int            @map("user_id")
  postTag        PostTag[]

  @@map("posts")
}

model PostTag {
  id     Int   @id @default(autoincrement())
  postId Int   @map("post_id")
  post   Post  @relation(fields: [postId], references: [id])
  tagId  Int   @map("tag_id")
  tag    Tag[]

  @@map("post_tags")
}

model Tag {
  id        Int     @id @default(autoincrement())
  name      String
  postTagId Int     @map("post_tag_id")
  postTag   PostTag @relation(fields: [postTagId], references: [id])

  @@map("tags")
}
